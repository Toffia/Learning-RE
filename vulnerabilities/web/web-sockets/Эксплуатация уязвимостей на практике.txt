Рекомендуется использовать OWASP ZAP или Burp Suite с настройкой прокси на отслеживание WebSocket сообщений

---------------------------------

DOS-атака (WS)https://www.neuralegion.com/blog/websocket-security-top-vulnerabilities/#authentication-during-handshake

Открываем и закрываем несколько подключений, одновременно отправляя сообщений
Лучше всего справился этот фаззер: https://snikt.net/blog/2019/05/22/to-fuzz-a-websocket/
Плюс, подойдет: https://github.com/andresriancho/websocket-fuzzer

Cross-Site WebSocket Hijacking (CSWSH) (CSRF) (WS)
При помощи Burp можно создать страничку, которая будет открывать WebSocket и пересылать на него что-либо
Это возможно только при отсутствии дополнительного вида аутентификации, вроде токенов, или проверки через код
https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking

XSS (WS)
Как и обычная XSS, если что-то из сообщения попадает на страницу, это можно пробовать эксплуатировать
О XSS: https://www.neuralegion.com/blog/xss/
О XSS в WebSocket: https://medium.com/@osamaavvan/exploiting-websocket-application-wide-xss-csrf-66e9e2ac8dfa

Незашифрованный канал (WS)
TCP изначально не предлагает встроенных методов шифровки, что можно эксплуатировать.
Для решения использовать WSS (WS over SSL/TLS) вместо WS

Маскировка данных (WS)
В некоторых случаях, на те же XSS (внедрение кода в сообщение) сообщение проверяется в маскированном виде, то есть, средства
защиты не могут обнаружить код, и пропускают его. Чтобы этого избежать, нужно проводить проверку данных после расшифровки сообщения

